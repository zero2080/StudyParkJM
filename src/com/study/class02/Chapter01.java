package com.study.class02;

public class Chapter01 {
	/*
	 * 자바의 역사
	 * - SUN의 제임스고슬링을 필두로하여 개발한 프로그래밍 언어
	 * - 1995년 최초 발표
	 * - 객체 지향적 프로그래밍 언어
	 * 
	 * 특징 : 컴파일언어(반대 언어 : 인터프리터 언어) 지만 OS에 영향을 크게 받지 않는다.
	 *			그 이유는 JVM이라는 가상머신이 존재하기 때문인데
	 *			이 JVM은 OS와 자바 프로그램(자바 어플리케이션)사이에서
	 *			OS와 통역사 역할을 한다.
	 * 
	 * 
	 */
	
	/*
	 * Compile(컴파일)
	 *  - 자바의 역사에서 나와있듯이 자바는 컴파일언어이다.
	 *  - 컴파일이란 우리가 프로그래밍한 데이터를 컴퓨터가 수행할 수 있게 해석을 한다는 의미이다.
	 *  - 우리가 사용하는 대부분의 컴퓨터는 0과 1로 이루어진 2진수로 이루어져 있고, 이 0과 1로 이루어진 컴퓨터가 이해할 수 있는 상태를 바이트코드라고 한다.
	 *  - 다시 정리하면 컴파일은 컴퓨터가 이해할수있는 바이트코드로 변환해주는 과정이라보면된다.
	 *  - 컴파일을 통해 가질 수 있는 장점
	 *  	- 빠르다. 한번 컴파일하면 몇번을 실행해도 다시 컴파일 하지 않아도된다.
	 *  	- 컴파일 단계에서 코드의 오류를 검출할 수 있다.
	 */
	
	/*
	 * JVM(Java Virtual Machine)
	 *  직역하면 자바 가상 머신으로 컴파일 및 자바의 실행전반을 관리하는 시스템이다.
	 */
	
	/*
	 * SE(Standard Edition) 과 EE (Enterprise Edition)
	 *  우리가 주로 다룰 자바는 두가지 버전으로 출된다.
	 *  일반 사용자용 개발킷 "SE" 와 기업용 개발킷인 "EE"이다.
	 *  자바의 라이센스 규정은 JDK에 한정된다.
	 *   - JDK (Java Devalopment Kit)
	 *   	- JDK는 배포킷에 따라 다르다 
	 *   	- Open JDK = 완전 무료
	 *   	- Oracle JDK = 조건부 무료
	 *   쉽게 생각해 Oracle JDK는 기업이 상업적으로 사용하면 돈을 내야한다.
	 *   또 다른 차이점은 Oracle에서 개발 지원을 해준다(오류 패치 등)
	 */
	
	/*
	 * JDK 1 ~ 15
	 * 	- 1 : 리플렉션, JavaBeans, InnerClass 등 도입
	 * 	- 2 : GUI(JWT 등), Collection, Java Applet 등 도입
	 *	- 4 : JavaWebStart, 정규 표현식, IPv6등 도입
	 * 	- 5 : Enumeration, Scanner 등 추가
	 *  - 6 : JDBC, Annotation 등 추가
	 *  - 7 : Switch String 지원, 고속 IO(Input Outout)라이브러리 지원(NIO)
	 *  - 8 : 마지막 32bit운영체제 지원 , 람다, Interface Default Method 등 추가
	 *  - 9 : 가장 수명이 짧은 버전 출시 4개월만에 지원이 종료됨
	 *  -10 : 지역변수로 var가 사용가능해짐
	 *  -11 : 8버전 이후로 가장 긴 지원기간 , OracleJDK와 OpenJDK 의 사실상 동일화
	 *  -12 : switch문 사용법 추가(간소화), 
	 *  -13 : switch문 yield문 추가
	 *  -15 : 클래스 기능 강화 / 가비지컬랙터 강화 등 추가
	 *  
	 *  이와 같이 여러가지 버전이 있지만 가장 최신이 좋다고만은 할 수 없다.
	 *  많은 버전이 있고 제각각 사용법이 다르며, 특정버전에서는 더이상 하위버전에서 개발된 자바어플리케이션을 컴파일 할 수 없다는 단점도 존재한다.
	 *  그러므로 개발에 앞서 버전별 특/장/단점을 파악하고, 적절한 버전을 골라야 한다.
	 *  또한 한가지 버전에서 익숙해지고 나머지 파생된 기술을 상황에 맞게 익혀가면 된다.
	 */
	
	
	/****************************************************************************/
	
	/*
	 * 참고
	 */
}
